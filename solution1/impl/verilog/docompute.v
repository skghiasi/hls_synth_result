// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="docompute,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=41,HLS_SYN_LUT=70}" *)

module docompute (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TLAST,
        input_r_TKEEP,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TLAST,
        output_r_TKEEP,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [511:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [0:0] input_r_TLAST;
input  [63:0] input_r_TKEEP;
input  [511:0] output_r_TDATA;
input   output_r_TVALID;
output   output_r_TREADY;
input  [0:0] output_r_TLAST;
input  [63:0] output_r_TKEEP;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    input_V_keep_V_0_vld_in;
wire    input_V_keep_V_0_ack_out;
reg   [1:0] input_V_keep_V_0_state;
wire    output_V_keep_V_0_vld_in;
wire    output_V_keep_V_0_ack_out;
reg   [1:0] output_V_keep_V_0_state;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 input_V_keep_V_0_state = 2'd0;
#0 output_V_keep_V_0_state = 2'd0;
end

docompute_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
docompute_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((input_V_keep_V_0_state == 2'd2) & (input_V_keep_V_0_vld_in == 1'b0)) | ((input_V_keep_V_0_state == 2'd3) & (input_V_keep_V_0_vld_in == 1'b0) & (input_V_keep_V_0_ack_out == 1'b1)))) begin
            input_V_keep_V_0_state <= 2'd2;
        end else if ((((input_V_keep_V_0_state == 2'd1) & (input_V_keep_V_0_ack_out == 1'b0)) | ((input_V_keep_V_0_state == 2'd3) & (input_V_keep_V_0_ack_out == 1'b0) & (input_V_keep_V_0_vld_in == 1'b1)))) begin
            input_V_keep_V_0_state <= 2'd1;
        end else if (((~((input_V_keep_V_0_vld_in == 1'b0) & (input_V_keep_V_0_ack_out == 1'b1)) & ~((input_V_keep_V_0_ack_out == 1'b0) & (input_V_keep_V_0_vld_in == 1'b1)) & (input_V_keep_V_0_state == 2'd3)) | ((input_V_keep_V_0_state == 2'd1) & (input_V_keep_V_0_ack_out == 1'b1)) | ((input_V_keep_V_0_state == 2'd2) & (input_V_keep_V_0_vld_in == 1'b1)))) begin
            input_V_keep_V_0_state <= 2'd3;
        end else begin
            input_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((output_V_keep_V_0_state == 2'd2) & (output_V_keep_V_0_vld_in == 1'b0)) | ((output_V_keep_V_0_state == 2'd3) & (output_V_keep_V_0_vld_in == 1'b0) & (output_V_keep_V_0_ack_out == 1'b1)))) begin
            output_V_keep_V_0_state <= 2'd2;
        end else if ((((output_V_keep_V_0_state == 2'd1) & (output_V_keep_V_0_ack_out == 1'b0)) | ((output_V_keep_V_0_state == 2'd3) & (output_V_keep_V_0_ack_out == 1'b0) & (output_V_keep_V_0_vld_in == 1'b1)))) begin
            output_V_keep_V_0_state <= 2'd1;
        end else if (((~((output_V_keep_V_0_vld_in == 1'b0) & (output_V_keep_V_0_ack_out == 1'b1)) & ~((output_V_keep_V_0_ack_out == 1'b0) & (output_V_keep_V_0_vld_in == 1'b1)) & (output_V_keep_V_0_state == 2'd3)) | ((output_V_keep_V_0_state == 2'd1) & (output_V_keep_V_0_ack_out == 1'b1)) | ((output_V_keep_V_0_state == 2'd2) & (output_V_keep_V_0_vld_in == 1'b1)))) begin
            output_V_keep_V_0_state <= 2'd3;
        end else begin
            output_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign input_V_keep_V_0_ack_out = 1'b0;

assign input_V_keep_V_0_vld_in = input_r_TVALID;

assign input_r_TREADY = input_V_keep_V_0_state[1'd1];

assign output_V_keep_V_0_ack_out = 1'b0;

assign output_V_keep_V_0_vld_in = output_r_TVALID;

assign output_r_TREADY = output_V_keep_V_0_state[1'd1];

endmodule //docompute
