-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity docompute is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    output_r_TVALID : IN STD_LOGIC;
    output_r_TREADY : OUT STD_LOGIC;
    output_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of docompute is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "docompute,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=41,HLS_SYN_LUT=70}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V_keep_V_0_vld_in : STD_LOGIC;
    signal input_V_keep_V_0_ack_out : STD_LOGIC;
    signal input_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_keep_V_0_vld_in : STD_LOGIC;
    signal output_V_keep_V_0_ack_out : STD_LOGIC;
    signal output_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component docompute_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    docompute_control_s_axi_U : component docompute_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    input_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_keep_V_0_state = ap_const_lv2_2) and (input_V_keep_V_0_vld_in = ap_const_logic_0)) or ((input_V_keep_V_0_state = ap_const_lv2_3) and (input_V_keep_V_0_vld_in = ap_const_logic_0) and (input_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    input_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((input_V_keep_V_0_state = ap_const_lv2_1) and (input_V_keep_V_0_ack_out = ap_const_logic_0)) or ((input_V_keep_V_0_state = ap_const_lv2_3) and (input_V_keep_V_0_ack_out = ap_const_logic_0) and (input_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_keep_V_0_vld_in = ap_const_logic_0) and (input_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((input_V_keep_V_0_ack_out = ap_const_logic_0) and (input_V_keep_V_0_vld_in = ap_const_logic_1))) and (input_V_keep_V_0_state = ap_const_lv2_3)) or ((input_V_keep_V_0_state = ap_const_lv2_1) and (input_V_keep_V_0_ack_out = ap_const_logic_1)) or ((input_V_keep_V_0_state = ap_const_lv2_2) and (input_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((output_V_keep_V_0_state = ap_const_lv2_2) and (output_V_keep_V_0_vld_in = ap_const_logic_0)) or ((output_V_keep_V_0_state = ap_const_lv2_3) and (output_V_keep_V_0_vld_in = ap_const_logic_0) and (output_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    output_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((output_V_keep_V_0_state = ap_const_lv2_1) and (output_V_keep_V_0_ack_out = ap_const_logic_0)) or ((output_V_keep_V_0_state = ap_const_lv2_3) and (output_V_keep_V_0_ack_out = ap_const_logic_0) and (output_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    output_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((output_V_keep_V_0_vld_in = ap_const_logic_0) and (output_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((output_V_keep_V_0_ack_out = ap_const_logic_0) and (output_V_keep_V_0_vld_in = ap_const_logic_1))) and (output_V_keep_V_0_state = ap_const_lv2_3)) or ((output_V_keep_V_0_state = ap_const_lv2_1) and (output_V_keep_V_0_ack_out = ap_const_logic_1)) or ((output_V_keep_V_0_state = ap_const_lv2_2) and (output_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    output_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    output_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    input_V_keep_V_0_ack_out <= ap_const_logic_0;
    input_V_keep_V_0_vld_in <= input_r_TVALID;
    input_r_TREADY <= input_V_keep_V_0_state(1);
    output_V_keep_V_0_ack_out <= ap_const_logic_0;
    output_V_keep_V_0_vld_in <= output_r_TVALID;
    output_r_TREADY <= output_V_keep_V_0_state(1);
end behav;
