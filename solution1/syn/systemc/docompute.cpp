// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "docompute.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic docompute::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic docompute::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> docompute::ap_ST_fsm_state1 = "1";
const sc_lv<32> docompute::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> docompute::ap_const_lv1_1 = "1";
const sc_lv<2> docompute::ap_const_lv2_0 = "00";
const sc_lv<2> docompute::ap_const_lv2_2 = "10";
const sc_lv<2> docompute::ap_const_lv2_3 = "11";
const sc_lv<2> docompute::ap_const_lv2_1 = "1";
const int docompute::C_S_AXI_DATA_WIDTH = "100000";
const bool docompute::ap_const_boolean_1 = true;

docompute::docompute(sc_module_name name) : sc_module(name), mVcdFile(0) {
    docompute_control_s_axi_U = new docompute_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("docompute_control_s_axi_U");
    docompute_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    docompute_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    docompute_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    docompute_control_s_axi_U->WVALID(s_axi_control_WVALID);
    docompute_control_s_axi_U->WREADY(s_axi_control_WREADY);
    docompute_control_s_axi_U->WDATA(s_axi_control_WDATA);
    docompute_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    docompute_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    docompute_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    docompute_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    docompute_control_s_axi_U->RVALID(s_axi_control_RVALID);
    docompute_control_s_axi_U->RREADY(s_axi_control_RREADY);
    docompute_control_s_axi_U->RDATA(s_axi_control_RDATA);
    docompute_control_s_axi_U->RRESP(s_axi_control_RRESP);
    docompute_control_s_axi_U->BVALID(s_axi_control_BVALID);
    docompute_control_s_axi_U->BREADY(s_axi_control_BREADY);
    docompute_control_s_axi_U->BRESP(s_axi_control_BRESP);
    docompute_control_s_axi_U->ACLK(ap_clk);
    docompute_control_s_axi_U->ARESET(ap_rst_n_inv);
    docompute_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    docompute_control_s_axi_U->ap_start(ap_start);
    docompute_control_s_axi_U->interrupt(interrupt);
    docompute_control_s_axi_U->ap_ready(ap_ready);
    docompute_control_s_axi_U->ap_done(ap_done);
    docompute_control_s_axi_U->ap_idle(ap_idle);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_input_V_keep_V_0_ack_out);

    SC_METHOD(thread_input_V_keep_V_0_vld_in);
    sensitive << ( input_r_TVALID );

    SC_METHOD(thread_input_r_TREADY);
    sensitive << ( input_V_keep_V_0_state );

    SC_METHOD(thread_output_V_keep_V_0_ack_out);

    SC_METHOD(thread_output_V_keep_V_0_vld_in);
    sensitive << ( output_r_TVALID );

    SC_METHOD(thread_output_r_TREADY);
    sensitive << ( output_V_keep_V_0_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "1";
    input_V_keep_V_0_state = "00";
    output_V_keep_V_0_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "docompute_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, input_r_TDATA, "(port)input_r_TDATA");
    sc_trace(mVcdFile, input_r_TVALID, "(port)input_r_TVALID");
    sc_trace(mVcdFile, input_r_TREADY, "(port)input_r_TREADY");
    sc_trace(mVcdFile, input_r_TLAST, "(port)input_r_TLAST");
    sc_trace(mVcdFile, input_r_TKEEP, "(port)input_r_TKEEP");
    sc_trace(mVcdFile, output_r_TDATA, "(port)output_r_TDATA");
    sc_trace(mVcdFile, output_r_TVALID, "(port)output_r_TVALID");
    sc_trace(mVcdFile, output_r_TREADY, "(port)output_r_TREADY");
    sc_trace(mVcdFile, output_r_TLAST, "(port)output_r_TLAST");
    sc_trace(mVcdFile, output_r_TKEEP, "(port)output_r_TKEEP");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_V_keep_V_0_vld_in, "input_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, input_V_keep_V_0_ack_out, "input_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, input_V_keep_V_0_state, "input_V_keep_V_0_state");
    sc_trace(mVcdFile, output_V_keep_V_0_vld_in, "output_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, output_V_keep_V_0_ack_out, "output_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, output_V_keep_V_0_state, "output_V_keep_V_0_state");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("docompute.hdltvin.dat");
    mHdltvoutHandle.open("docompute.hdltvout.dat");
}

docompute::~docompute() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete docompute_control_s_axi_U;
}

void docompute::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void docompute::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        input_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, input_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, input_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, input_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, input_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, input_V_keep_V_0_state.read())))) {
            input_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, input_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, input_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, input_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_V_keep_V_0_state.read())))) {
            input_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, input_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, input_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, input_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, input_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, input_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, input_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, input_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, input_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, input_V_keep_V_0_ack_out.read()))))) {
            input_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            input_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        output_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, output_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, output_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, output_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, output_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, output_V_keep_V_0_state.read())))) {
            output_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, output_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, output_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, output_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_V_keep_V_0_state.read())))) {
            output_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, output_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, output_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, output_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, output_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, output_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, output_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, output_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, output_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, output_V_keep_V_0_ack_out.read()))))) {
            output_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            output_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
}

void docompute::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void docompute::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void docompute::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void docompute::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void docompute::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void docompute::thread_input_V_keep_V_0_ack_out() {
    input_V_keep_V_0_ack_out = ap_const_logic_0;
}

void docompute::thread_input_V_keep_V_0_vld_in() {
    input_V_keep_V_0_vld_in = input_r_TVALID.read();
}

void docompute::thread_input_r_TREADY() {
    input_r_TREADY = input_V_keep_V_0_state.read()[1];
}

void docompute::thread_output_V_keep_V_0_ack_out() {
    output_V_keep_V_0_ack_out = ap_const_logic_0;
}

void docompute::thread_output_V_keep_V_0_vld_in() {
    output_V_keep_V_0_vld_in = output_r_TVALID.read();
}

void docompute::thread_output_r_TREADY() {
    output_r_TREADY = output_V_keep_V_0_state.read()[1];
}

void docompute::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void docompute::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_TDATA\" :  \"" << input_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_TVALID\" :  \"" << input_r_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"input_r_TREADY\" :  \"" << input_r_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_TLAST\" :  \"" << input_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_TKEEP\" :  \"" << input_r_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_r_TDATA\" :  \"" << output_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_r_TVALID\" :  \"" << output_r_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_TREADY\" :  \"" << output_r_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_r_TLAST\" :  \"" << output_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_r_TKEEP\" :  \"" << output_r_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

